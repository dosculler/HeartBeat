/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * aapt tool from the resource data it found.  It
 * should not be modified by hand.
 */

package com.android.deskclock3;

public final class R {
    public static final class array {
        /**  Alarm confirmation toast: Describes how long from now until
         alarm fires 
         */
        public static final int alarm_set=0x7f090002;
        /**  Entries listed in the ListPreference when invoking the auto silence
         preference. 
         */
        public static final int auto_silence_entries=0x7f090003;
        /**  Values that are retrieved from the ListPreference. These must match
         the auto_silence_entries above. 
 Off 
         */
        public static final int auto_silence_values=0x7f090004;
        public static final int cities_names=0x7f090000;
        /**  Entries listed in the ListPreference when invoking the clock style
         preference. 
         */
        public static final int clock_style_entries=0x7f09000b;
        /**  Values that are retrieved from the ListPreference. These must match
         the clock_style_entries above. 
         */
        public static final int clock_style_values=0x7f09000c;
        /**  Formatted stopwatch time for laps shared using the share button 
         */
        public static final int shared_laps_format_set=0x7f090008;
        /**  Formatted stopwatch time 
         */
        public static final int stopwatch_format_set=0x7f090007;
        /**  Label to enumerate the number of laps the user has counted 
         */
        public static final int sw_lap_number_set=0x7f090009;
        /**  Jocular content that user may append when sharing the lap times 
         */
        public static final int sw_share_strings=0x7f09000a;
        /**  Timer notification: how long from now until timer goes off. 
         */
        public static final int timer_notifications=0x7f090001;
        /**  Choices for timezones, must be kept in sync with timezone_values. CHAR LIMIT=25] 
         */
        public static final int timezone_labels=0x7f09000d;
        /**  Choices for timezones, must be kept in sync with timezone_values. 
         */
        public static final int timezone_values=0x7f09000e;
        /**  Entries listed in the setting for the side-button action. 
         */
        public static final int volume_button_setting_entries=0x7f090005;
        /**  Values for the side-button setting. 
         */
        public static final int volume_button_setting_values=0x7f090006;
    }
    public static final class attr {
        /**  Used when the handle shouldn't wait to be hit before following the finger 
         <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int alwaysTrackFinger=0x7f01000c;
        /**  Reference to an array resource that be used to announce the directions with targets around the circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int directionDescriptions=0x7f010002;
        /**  Number of waves/chevrons to show in animation. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int feedbackCount=0x7f01000b;
        /**  Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is "h:mm a". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int format12Hour=0x7f010010;
        /**  Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is "H:mm". 
         <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int format24Hour=0x7f010011;
        /**  Size of target radius. Points within this distance of target center is a "hit". 

        <attr name="hitRadius" format="dimension"/>
        
 Radius of glow under finger. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int glowRadius=0x7f010008;
        /**  Sets a drawable as the center. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int handleDrawable=0x7f010003;
        /**  Inner radius of glow area. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int innerRadius=0x7f010006;
        /** <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int jewelColor=0x7f01000f;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int jewelOffset=0x7f01000e;
        /** <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int jewelRadius=0x7f01000d;
        /**  Outer radius of glow area. Target icons will be drawn on this circle. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int outerRadius=0x7f010007;
        /**  Drawable to use for wave ripple animation. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int outerRingDrawable=0x7f010004;
        /**  Drawble used for drawing points 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int pointDrawable=0x7f010005;
        /**  How close we need to be before snapping to a target. 
         <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int snapMargin=0x7f01000a;
        /**  Reference to an array resource that be used as description for the targets around the circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int targetDescriptions=0x7f010001;
        /**  Reference to an array resource that be shown as targets around a circle. 
         <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
         */
        public static final int targetDrawables=0x7f010000;
        /**  Tactile feedback duration for actions. Set to '0' for no vibration. 
         <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
         */
        public static final int vibrationDuration=0x7f010009;
    }
    public static final class bool {
        public static final int config_dockAppEnabled=0x7f0b0001;
        public static final int config_requiresScreenSaver=0x7f0b0000;
        public static final int config_rotateAlarmAlert=0x7f0b0002;
    }
    public static final class color {
        public static final int action_bar_button_text_color=0x7f0a0006;
        public static final int alarm_selected_color=0x7f0a001b;
        public static final int alarm_timeline_color=0x7f0a001c;
        public static final int alarm_whiteish=0x7f0a0011;
        public static final int ampm_off=0x7f0a0000;
        public static final int ampm_on=0x7f0a0001;
        public static final int ampm_text_color=0x7f0a0003;
        public static final int black=0x7f0a0008;
        /**  If this color is changed or no longer used as the primary background, ensure that blackish_trans is changed as well. 
         */
        public static final int blackish=0x7f0a0009;
        public static final int blackish_selected=0x7f0a000a;
        /**  Transparent background for use in the footer. 80% opacity. The color must remain the same as "blackish" above. 
         */
        public static final int blackish_trans=0x7f0a000b;
        public static final int clock_blue=0x7f0a0019;
        public static final int clock_gray=0x7f0a0018;
        public static final int clock_red=0x7f0a0016;
        public static final int clock_white=0x7f0a0017;
        public static final int dialog_gray=0x7f0a0007;
        public static final int grey=0x7f0a000e;
        public static final int main_button_normal=0x7f0a0012;
        public static final int main_button_red_normal=0x7f0a0014;
        /**  same as clock_red 
         */
        public static final int main_button_red_selected=0x7f0a0015;
        public static final int main_button_selected=0x7f0a0013;
        public static final int notification_bg=0x7f0a001a;
        public static final int red=0x7f0a000d;
        public static final int screen_saver_color=0x7f0a0004;
        public static final int screen_saver_dim_color=0x7f0a0005;
        public static final int time_text_color=0x7f0a0002;
        public static final int transparent=0x7f0a000f;
        public static final int transparent_white=0x7f0a0010;
        public static final int white=0x7f0a000c;
    }
    public static final class dimen {
        public static final int actionbar_tab_padding=0x7f080023;
        public static final int actionbar_title_font_size=0x7f080024;
        /**  Width of the clock, for use with alarm buttons. 
         */
        public static final int alarm_alert_display_width=0x7f080063;
        public static final int alarm_label_padding=0x7f080014;
        public static final int alarm_label_size=0x7f080045;
        public static final int alarm_min_distance=0x7f08002f;
        public static final int alarm_text_font_size=0x7f08002e;
        public static final int alarm_text_padding=0x7f08002d;
        public static final int alarm_time_font_size=0x7f08003f;
        public static final int alarm_timeline_inner_radius=0x7f08002c;
        public static final int alarm_timeline_layout_padding_top=0x7f080030;
        public static final int alarm_timeline_layout_width=0x7f080027;
        public static final int alarm_timeline_length=0x7f08002a;
        public static final int alarm_timeline_margin_top=0x7f080029;
        public static final int alarm_timeline_radius=0x7f08002b;
        public static final int alarm_timeline_title_margin_bottom=0x7f080031;
        public static final int alarm_timeline_title_text_size=0x7f080032;
        public static final int alarm_timeline_width=0x7f080028;
        public static final int alarm_undo_bar_horizontal_margin=0x7f080033;
        public static final int alert_dialog_title_height=0x7f080015;
        public static final int ampm_margin_top=0x7f080011;
        public static final int ampm_text_size=0x7f080004;
        /**  Analog clock size in the the screen saver 
         */
        public static final int analog_clock_diameter=0x7f08001f;
        public static final int analog_clock_margin=0x7f08005b;
        public static final int big_font_size=0x7f080037;
        public static final int body_font_padding=0x7f080041;
        public static final int body_font_size=0x7f08003e;
        public static final int bottom_text_size=0x7f080022;
        public static final int bottom_text_spacing_analog=0x7f080019;
        public static final int bottom_text_spacing_analog_small=0x7f08001a;
        public static final int bottom_text_spacing_digital=0x7f080017;
        public static final int button_font_size=0x7f080042;
        /**  Height of the button footers. 56 height and 16 on top and bottom. 
         */
        public static final int button_footer_height=0x7f08006c;
        /**  Negative value of the height of the button footers, for use with lightsout. 
         */
        public static final int button_footer_height_neg=0x7f08006d;
        public static final int circle_margin=0x7f08005a;
        /**  Size of margin for circles. 
         */
        public static final int circle_margin_top=0x7f080059;
        public static final int circletimer_circle_size=0x7f080035;
        public static final int circletimer_dot_size=0x7f080034;
        public static final int circletimer_marker_size=0x7f080036;
        public static final int cities_list_item_height=0x7f080058;
        public static final int city_name_font_size=0x7f080056;
        public static final int city_time_font_size=0x7f080057;
        /**  Bottom margin for the expand area 
         */
        public static final int collapse_expand_height=0x7f080083;
        public static final int date_text_size=0x7f080005;
        /**  Empty space at the edges of the delete button icons. Based off of 56dip width, only nonzero for tablets. 
         */
        public static final int delete_button_padding=0x7f080068;
        public static final int dialog_button_font_size=0x7f080044;
        /** padding should be (in dip) ~ 60% dialpad_font_size 
         */
        public static final int dialpad_digit_padding=0x7f080050;
        public static final int dialpad_font_size=0x7f08004f;
        public static final int digital_main_clock_text_size=0x7f08001d;
        public static final int digital_margin_bottom=0x7f08000e;
        public static final int digital_screensaver_clock_text_size=0x7f08001e;
        public static final int digital_widget_city_margin_bottom=0x7f080082;
        /**  top margin for digital_appwidget_listview 
         */
        public static final int digital_widget_list_margin_top=0x7f080081;
        /**  sum of fixed heights 
         */
        public static final int digital_widget_list_min_fixed_height=0x7f080080;
        /**  sum of scaled heights 
         */
        public static final int digital_widget_list_min_scaled_height=0x7f08007f;
        public static final int digital_world_clock_ampm_text_size=0x7f08001c;
        public static final int digital_world_clock_text_size=0x7f08001b;
        public static final int font_margin_adjust=0x7f080012;
        public static final int footer_button_layout_margin=0x7f080026;
        public static final int footer_button_size=0x7f080025;
        /**  Default glow radius for GlowPadView 
         */
        public static final int glowpadview_glow_radius=0x7f080071;
        /**  Default distance from each snap target that GlowPadView considers a "hit" 
         */
        public static final int glowpadview_inner_radius=0x7f080073;
        public static final int glowpadview_margin_bottom=0x7f080074;
        public static final int glowpadview_margin_right=0x7f080075;
        /**  Size of alarm alert outer ring. 
         */
        public static final int glowpadview_outerring_diameter=0x7f08006f;
        /**  Default distance beyond which GlowPadView snaps to the matching target 
         */
        public static final int glowpadview_snap_margin=0x7f080072;
        /**  Default target placement radius for GlowPadView. Should be 1/2 of outerring diameter. 
         */
        public static final int glowpadview_target_placement_radius=0x7f080070;
        public static final int header_font_size=0x7f08003d;
        public static final int label_font_size=0x7f08003a;
        public static final int label_margin_big=0x7f08004d;
        public static final int label_margin_small=0x7f08004e;
        /**  Empty space at the edges of the lap button icon. Based off of 56dip width, only nonzero for tablets.
         */
        public static final int lap_button_padding=0x7f080069;
        public static final int main_ampm_font_size=0x7f08003c;
        public static final int main_clock_padding=0x7f08004c;
        public static final int medium_font_padding=0x7f080046;
        public static final int medium_font_size=0x7f080039;
        public static final int medium_space_bottom=0x7f080049;
        public static final int medium_space_top=0x7f080048;
        public static final int min_digital_widget_height=0x7f08007c;
        public static final int min_digital_widget_resize_height=0x7f08007e;
        /**  same as min_digital_widget_{width,height} 
         */
        public static final int min_digital_widget_resize_width=0x7f08007d;
        /**  width/height of layout/digital_widget_time 
 height is sum of widget_big_font_size + label_font_size + margins 
         */
        public static final int min_digital_widget_width=0x7f08007b;
        public static final int min_lock=0x7f080002;
        public static final int min_swipe=0x7f080000;
        public static final int min_vert=0x7f080001;
        public static final int mini_time_margin_right=0x7f080009;
        public static final int next_alarm_margin_top=0x7f080013;
        public static final int next_alarm_text_size=0x7f080006;
        public static final int no_alarms_font_size=0x7f080040;
        /**  The width of the big icons in notifications. 
         */
        public static final int notification_large_icon_height=0x7f08005f;
        /**  The width of the big icons in notifications. 
         */
        public static final int notification_large_icon_width=0x7f08005e;
        /**  Size of smaller notification text (see TextAppearance.StatusBar.EventContent.Line2, Info, Time) 
         */
        public static final int notification_subtext_size=0x7f080062;
        /**  Size of notification text (see TextAppearance.StatusBar.EventContent) 
         */
        public static final int notification_text_size=0x7f080060;
        /**  Size of notification text titles (see TextAppearance.StatusBar.EventContent.Title) 
         */
        public static final int notification_title_text_size=0x7f080061;
        /**  Empty space at the edges of the +1 and reset button icons. Based off of 56dip width, only nonzero for tablets.
         */
        public static final int plusone_reset_button_padding=0x7f080067;
        public static final int popup_window_width=0x7f080016;
        public static final int screensaver_margin=0x7f080010;
        /**  11 
 Empty space at the edges of the delete button icons. Based off of 56dip width, only nonzero for tablets. 
         */
        public static final int share_button_padding=0x7f08006a;
        public static final int small_ampm_margin_left=0x7f08000a;
        public static final int small_font_size=0x7f080038;
        public static final int small_space=0x7f080047;
        public static final int small_time_margin_right=0x7f080008;
        public static final int style_label_space=0x7f08004a;
        public static final int sw_item_space=0x7f08004b;
        public static final int sw_padding_end=0x7f08005d;
        public static final int time_margin_bottom=0x7f08000c;
        public static final int time_margin_left=0x7f08000b;
        public static final int time_margin_right=0x7f080007;
        public static final int time_margin_top=0x7f08000d;
        public static final int time_text_size=0x7f080003;
        /**  16 
 Extra offset for timer button paddings. Only nonzero for non-tablets. 
         */
        public static final int timer_button_extra_offset=0x7f08006b;
        public static final int timer_circle_diameter=0x7f080020;
        public static final int timer_circle_margin=0x7f08005c;
        public static final int timer_circle_width=0x7f080021;
        /**  Height of space between timers. 
         */
        public static final int timer_divider_height=0x7f08006e;
        public static final int timer_label_font_size=0x7f080043;
        public static final int timer_padding_left=0x7f08000f;
        public static final int timer_setup_button_size=0x7f080052;
        public static final int timer_setup_delete_padding=0x7f080054;
        /** margin should be ~ half timer_setup_font_size 
         */
        public static final int timer_setup_delete_start_margin=0x7f080053;
        public static final int timer_setup_font_size=0x7f080051;
        public static final int timer_setup_label_size=0x7f080055;
        public static final int toast_bar_bottom_margin_in_conversation=0x7f080066;
        public static final int top_text_spacing_digital=0x7f080018;
        public static final int widget_24_medium_font_size=0x7f080078;
        /**  Digital Widget settings (keyguard|home_screen) 
 Clock and world clock sizes 
         */
        public static final int widget_big_font_size=0x7f080076;
        /**  Hour and minute spacing 
         */
        public static final int widget_big_time_margin_right=0x7f080079;
        public static final int widget_label_font_size=0x7f08003b;
        public static final int widget_medium_font_size=0x7f080077;
        public static final int widget_medium_time_margin_right=0x7f08007a;
        /**  Size of analog clock in world clock. 
         */
        public static final int world_clock_analog_size=0x7f080064;
        public static final int world_clock_margin=0x7f080065;
    }
    public static final class drawable {
        public static final int ic_alarm=0x7f020000;
        public static final int ic_alarm_normal=0x7f020001;
        public static final int ic_alarm_small=0x7f020002;
        public static final int ic_diamond_white=0x7f020003;
        public static final int ic_discard_holo_dark=0x7f020004;
        public static final int ic_expand_down=0x7f020005;
        public static final int notification_template_icon_bg=0x7f020006;
        public static final int notification_template_icon_low_bg=0x7f020007;
    }
    public static final class id {
        public static final int alarm_item=0x7f0d0001;
        public static final int btn_startlog=0x7f0d0015;
        public static final int btn_stoplog=0x7f0d0016;
        public static final int checkBoxClose=0x7f0d000b;
        public static final int checkBoxPing=0x7f0d0004;
        public static final int checkBoxRadio=0x7f0d000d;
        public static final int checkBoxWakelock=0x7f0d000c;
        public static final int delete_alarm=0x7f0d001e;
        public static final int deviceReboot=0x7f0d0014;
        public static final int editIP=0x7f0d0007;
        public static final int editTime=0x7f0d000a;
        public static final int editTimepoweron=0x7f0d0013;
        public static final int editTimeshutdown=0x7f0d000e;
        public static final int edit_alarm=0x7f0d001d;
        public static final int edit_label=0x7f0d0002;
        public static final int enable_alarm=0x7f0d001c;
        public static final int menu_delete=0x7f0d0021;
        public static final int menu_item_delete_alarm=0x7f0d0017;
        public static final int menu_item_help=0x7f0d001b;
        public static final int menu_item_night_mode=0x7f0d0020;
        public static final int menu_item_search=0x7f0d0018;
        public static final int menu_item_settings=0x7f0d001a;
        public static final int menu_item_sort=0x7f0d0019;
        public static final int menu_items=0x7f0d001f;
        public static final int numbers_key=0x7f0d0000;
        public static final int pingtest1=0x7f0d0005;
        public static final int poweron_time=0x7f0d0012;
        public static final int shutdown_time=0x7f0d000f;
        public static final int textTime1=0x7f0d0008;
        public static final int textview01=0x7f0d0003;
        public static final int writeTime=0x7f0d0009;
        public static final int write_poweron_Time=0x7f0d0011;
        public static final int write_shutdown_Time=0x7f0d0010;
        public static final int writeip=0x7f0d0006;
    }
    public static final class integer {
        /**  Total clocks per row is 2 + world_clocks_per_row. 
         */
        public static final int clocks_per_row=0x7f07000c;
        public static final int dim_animation_duration=0x7f070009;
        public static final int dismiss_animation_duration=0x7f070006;
        public static final int escape_animation_duration=0x7f070002;
        /** 
    <integer name="activity_slide_left_duration">475</integer>
    <integer name="activity_slide_right_duration">525</integer>
    <integer name="activity_collapse_duration">125</integer>
    <integer name="expand_cc_bcc_dur">150</integer>
    <integer name="fadein_cc_bcc_dur">150</integer>

    <integer name="dialog_animationDefaultDur">220</integer>
    <integer name="dialog_animationShortDur">150</integer>
    <integer name="shrink_animation_duration">350</integer>
    <integer name="slide_animation_duration">320</integer>
    <integer name="fade_in_animation_duration">350</integer>
    
         */
        public static final int fade_duration=0x7f070000;
        public static final int hide_animation_duration=0x7f070008;
        public static final int max_dismiss_velocity=0x7f070004;
        public static final int max_escape_animation_duration=0x7f070003;
        public static final int snap_animation_duration=0x7f070005;
        /**  Swipe constants 
         */
        public static final int swipe_escape_velocity=0x7f070001;
        public static final int swipe_scroll_slop=0x7f070007;
        public static final int timer_column_count=0x7f07000a;
        /**  Number of world clocks in a row, for the clock tab. 
         */
        public static final int world_clocks_per_row=0x7f07000b;
    }
    public static final class layout {
        public static final int alarm_time=0x7f040000;
        public static final int heartbeatconfig_layout=0x7f040001;
        public static final int otherconfig_layout=0x7f040002;
    }
    public static final class menu {
        public static final int alarm_cab_menu=0x7f100000;
        public static final int cities_menu=0x7f100001;
        public static final int context_menu=0x7f100002;
        public static final int desk_clock_menu=0x7f100003;
        public static final int set_alarm_context=0x7f100004;
        public static final int settings_menu=0x7f100005;
    }
    public static final class mipmap {
        public static final int ic_launcher_alarmclock=0x7f030000;
        public static final int ic_widget_analog_clock=0x7f030001;
    }
    public static final class plurals {
        /**  Stopwatch accessibility strings 
         */
        public static final int Nhours_description=0x7f0e0003;
        public static final int Nminutes_description=0x7f0e0004;
        public static final int Nseconds_description=0x7f0e0005;
        /**  Toast that appears after Alarm is snoozed from the Alarm
         dialog. Says the alarm will snooze for xxx minutes.  
         */
        public static final int alarm_alert_snooze_set=0x7f0e0000;
        /**  Alarm deletion confirmation message
         */
        public static final int alarm_delete_confirmation=0x7f0e0007;
        public static final int snooze_duration=0x7f0e0001;
        public static final int snooze_picker_label=0x7f0e0002;
        public static final int timers_num=0x7f0e0006;
    }
    public static final class raw {
        public static final int fallbackring=0x7f060000;
        public static final int in_call_alarm=0x7f060001;
    }
    public static final class string {
        /**  String matching the lock screen format for displaying the date. 
         */
        public static final int abbrev_wday_month_day_no_year=0x7f0c0000;
        /**  Menu item on Alarm Clock screen: Add alarm 
         */
        public static final int add_alarm=0x7f0c0005;
        /**  Button labels on the pre-dismiss alarm notifications: Dismiss now 
         */
        public static final int alarm_alert_dismiss_now_text=0x7f0c0018;
        /**  Button labels on the alarm dialog: Dismiss 
         */
        public static final int alarm_alert_dismiss_text=0x7f0c0017;
        /**  Text to appear in the notification title while an alarm is about to go off. 
         */
        public static final int alarm_alert_predismiss_title=0x7f0c001d;
        /**  Button labels on the alarm dialog: Snooze 
         */
        public static final int alarm_alert_snooze_text=0x7f0c001b;
        /**  Text to appear inside a notification while an alarm is snoozing. 
         */
        public static final int alarm_alert_snooze_until=0x7f0c001c;
        public static final int alarm_button_description=0x7f0c003b;
        /**  Toast content when an alarm was deleted  
         */
        public static final int alarm_deleted=0x7f0c0094;
        /**  A description for the DeskClock alarm sound playback service.
         [CHAR LIMIT=NONE] 
         */
        public static final int alarm_klaxon_service_desc=0x7f0c0045;
        /**  Title for AlarmClock activity 
 Label for the Alarms activity displayed on-screen when that activity must be represented to the user. 
         */
        public static final int alarm_list_title=0x7f0c0004;
        public static final int alarm_missed_text=0x7f0c001a;
        /**  Alarm Alert screen: this message is shown after an alarm rung
         unattended for a number of minutes.  It tells the user that
         the alarm has been silenced.
         */
        public static final int alarm_missed_title=0x7f0c0019;
        /**  Text to display in the notification ticker and label 
         */
        public static final int alarm_notify_snooze_label=0x7f0c0036;
        /**  Text to display in the notification when the alarm has been snoozed 
         */
        public static final int alarm_notify_snooze_text=0x7f0c0037;
        /**  Text to display in the small text of the notification 
         */
        public static final int alarm_notify_text=0x7f0c0035;
        /**  Setting labels on Set alarm screen: Repeat 
         */
        public static final int alarm_repeat=0x7f0c0013;
        /**  Header in the preferences settings for the section pertaining to alarms 
         */
        public static final int alarm_settings=0x7f0c0080;
        /**  Font size for AM/PM should match alarm_label_size 
         */
        public static final int alarm_time_12_hours_format=0x7f0c00a3;
        /**  Title text for alarm timeline view [CHAR LIMIT=20] 
         */
        public static final int alarm_timeline_title_text=0x7f0c0006;
        /**  Description of the button to undo change to alarm 
         */
        public static final int alarm_undo=0x7f0c0093;
        /**  Setting labels on Set alarm screen: Vibration on or off 
         */
        public static final int alarm_vibrate=0x7f0c0012;
        /**  Setting title for changing the alarm volume. 
         */
        public static final int alarm_volume_title=0x7f0c0033;
        /**  Displays the number of alarms selected from the list of alarms. 
         */
        public static final int alarms_selected=0x7f0c0099;
        /**  Setting labels on Set alarm screen: Select alarm ringtone  
         */
        public static final int alert=0x7f0c0014;
        /**  Notification text when multiple timers are stopped. 
         */
        public static final int all_timers_stopped_notif=0x7f0c008b;
        /**  Label for analog clock gadget displayed on-screen when that gadget is represented to the user. 
         */
        public static final int analog_gadget=0x7f0c0029;
        /**  
 Label shown on launcher icon 
 Label for the this application displayed on-screen when this application must be represented to the user. 
         */
        public static final int app_label=0x7f0c0003;
        /**  Auto silence summary when turned off 
         */
        public static final int auto_silence_never=0x7f0c002f;
        /**  Auto silence summary string set based on the preference value. 
         */
        public static final int auto_silence_summary=0x7f0c002e;
        /**  Auto silence preference title 
         */
        public static final int auto_silence_title=0x7f0c002d;
        /**  Title for an option that will automtically show a clock representing the user's regular timezone on the main fragment whenever the user leaves their regular timezone
         */
        public static final int automatic_home_clock=0x7f0c0076;
        /**  Describes the functionality provided by the automatic_home_clock option 
         */
        public static final int automatic_home_clock_summary=0x7f0c0077;
        /**  A short representation of charging information, e.g "34%" 
         */
        public static final int battery_charging_level=0x7f0c0043;
        /** - Clock view buttons strings
 Describes the purpose of the button to start the activity to add/edit/delete alarms 
         */
        public static final int button_alarms=0x7f0c004e;
        /**  Describes the purpose of the button which provides a list of cities for the world clock settings 
         */
        public static final int button_cities=0x7f0c004f;
        /**  Describes the purpose of the button which pops up a menu of setting choices 
         */
        public static final int button_menu=0x7f0c0050;
        /**  Label for the Cities activity displayed on-screen when that activity must be represented to the user. 
         */
        public static final int cities_activity_title=0x7f0c0073;
        /**  world clock deletion confirmation 
         */
        public static final int city_delete_confirmation=0x7f0c009c;
        /**  format strings for clocks 
         */
        public static final int clock_24_hours_format=0x7f0c009e;
        /**  Appears at the top of the Clock Picker screen: Tell user to
         select a clock to display 
         */
        public static final int clock_instructions=0x7f0c0028;
        /**  Settings strings 
 Header in the preferences settings for the section pertaining to clocks on the main fragment 
         */
        public static final int clock_settings=0x7f0c0074;
        /**  Header for a Clock Dream Setting referring to choosing analog or digital style 
         */
        public static final int clock_style=0x7f0c0075;
        /**  Description of the up caret in the alarm alert screen to collapse the alarm content to summary perspective. [CHAR LIMIT=NONE] 
         */
        public static final int collapse_alarm=0x7f0c0092;
        /**  Label on the main screen control used to set alarm [CHAR LIMIT=30]
         */
        public static final int control_set_alarm=0x7f0c0048;
        /**  Label on the main screen control used to set alarm when there is already an existing alarm [CHAR LIMIT=30]
         */
        public static final int control_set_alarm_with_existing=0x7f0c0049;
        /**  Alarm confirmation toast: singular day 
         */
        public static final int day=0x7f0c001f;
        /**  Repeat options that appear under an alarm on main Alarm Clock
         screen to identify repetition schedule: concatenate days with
         this character, i.e. "Mon, Tue, Wed" 
         */
        public static final int day_concat=0x7f0c0027;
        /**  Alarm confirmation toast: plural days 
         */
        public static final int days=0x7f0c0020;
        /**  Default clock style. 
         */
        public static final int default_clock_style=0x7f0c0002;
        /**  Default label to display for an alarm 
         */
        public static final int default_label=0x7f0c0010;
        /**  Title of the ringtone setting. 
         */
        public static final int default_ringtone_setting_title=0x7f0c003a;
        /**  Delete button when editing an alarm. 
         */
        public static final int delete=0x7f0c0032;
        /**  Context Menu Item on Alarm Settings screen: Delete alarm 
         */
        public static final int delete_alarm=0x7f0c0009;
        /**  Delete alarm confirmation dialog message. 
         */
        public static final int delete_alarm_confirm=0x7f0c000c;
        /**  message used by the talkback accessebility app to say that something was deleted 
         */
        public static final int deleted_message=0x7f0c009a;
        /**  Description of the down direction in the alarm alert screen. [CHAR LIMIT=NONE] 
         */
        public static final int description_direction_down=0x7f0c0088;
        /**  Description of the left direction in the alarm alert screen. [CHAR LIMIT=NONE] 
         */
        public static final int description_direction_left=0x7f0c0086;
        /**  Description of the right direction in the alarm alert screen. [CHAR LIMIT=NONE] 
         */
        public static final int description_direction_right=0x7f0c0085;
        /**  Description of the up direction in the alarm alert screen. [CHAR LIMIT=NONE] 
         */
        public static final int description_direction_up=0x7f0c0087;
        public static final int desk_clock_button_description=0x7f0c0040;
        public static final int desk_clock_help_url=0x7f0c0082;
        /**  Label for digital clock gadget displayed on-screen when that gadget is represented to the user. 
         */
        public static final int digital_gadget=0x7f0c009d;
        /**  Context Menu Item on Alarm Settings screen: Disable alarm 
         */
        public static final int disable_alarm=0x7f0c000b;
        /**  Done button when editing an alarm. 
         */
        public static final int done=0x7f0c0030;
        /**  Context Menu Item on Alarm Settings screen: Enable alarm 
         */
        public static final int enable_alarm=0x7f0c000a;
        /**  Repeat options that appear under an alarm on main Alarm Clock
         screen to identify repetition schedule: special case for when
         the alarm is set to repeat every day 
         */
        public static final int every_day=0x7f0c0025;
        /**  Description of the down caret in the alarm alert screen to expand the alarm content to edit perspective. [CHAR LIMIT=NONE] 
         */
        public static final int expand_alarm=0x7f0c0091;
        /**  Format for describing the date, for accessibility. 
         */
        public static final int full_wday_month_day_no_year=0x7f0c0001;
        public static final int gallery_button_description=0x7f0c003c;
        public static final int heartbeat_close=0x7f0c00ae;
        public static final int heartbeat_config_autoclose=0x7f0c00aa;
        public static final int heartbeat_config_ip=0x7f0c00a8;
        public static final int heartbeat_config_name=0x7f0c00a6;
        public static final int heartbeat_config_ping=0x7f0c00a7;
        public static final int heartbeat_config_radio=0x7f0c00ab;
        public static final int heartbeat_config_reboot=0x7f0c00ad;
        public static final int heartbeat_config_time=0x7f0c00a9;
        public static final int heartbeat_config_wakelock=0x7f0c00af;
        public static final int heartbeat_config_write=0x7f0c00ac;
        public static final int heartbeat_poweron_time=0x7f0c00b6;
        public static final int heartbeat_shutdown_time=0x7f0c00b5;
        /**  Help activity name 
         */
        public static final int help=0x7f0c002a;
        /**  Menu item on Alarm Clock screen: Hide clock 
         */
        public static final int hide_clock=0x7f0c000e;
        public static final int home_button_description=0x7f0c003f;
        /**  Title with the clock on the main page displaying the user's regular timezone (shows when automatic_home_clock enabled) 
         */
        public static final int home_label=0x7f0c0072;
        /**  Title in the preferences change the time zone for the user's home 
         */
        public static final int home_time_zone=0x7f0c0078;
        /**  Title in a list dialog box to pick a time zone for the user's home 
         */
        public static final int home_time_zone_title=0x7f0c0079;
        /**  Alarm confirmation toast: singular hour 
         */
        public static final int hour=0x7f0c0021;
        /**  Alarm confirmation toast: plural hours 
         */
        public static final int hours=0x7f0c0022;
        /**  Abbreviation for temporal hours [CHAR LIMIT=1] 
         */
        public static final int hours_label=0x7f0c005d;
        /**  Accessibility strings 
         */
        public static final int hours_label_description=0x7f0c0060;
        /**  Setting label on Set alarm screen: Label 
         */
        public static final int label=0x7f0c000f;
        /**  Accessibility labels for alarm buttons 
         */
        public static final int label_description=0x7f0c0041;
        public static final int label_unlabeled=0x7f0c0098;
        /**  String displayed as the alert summary while loading the alert name from
         the media player. [CHAR LIMIT=NONE] 
         */
        public static final int loading_ringtone=0x7f0c0046;
        /**  Font size for AM/PM should match bottom_text_size 
         */
        public static final int main_clock_12_hours_format=0x7f0c00a1;
        public static final int main_widget_12_hours_format=0x7f0c009f;
        /**   ActionBar strings 
 Describes the purpose of the tab button which which switches the activity to the Alarm page 
         */
        public static final int menu_alarm=0x7f0c004a;
        /**  Describes the purpose of the tab button which which switches the activity to the Clock page 
         */
        public static final int menu_clock=0x7f0c004c;
        /**  Menu item on Alarm Clock screen: Desk clock 
         */
        public static final int menu_desk_clock=0x7f0c0007;
        /**  Menu item on Alarm Clock screen: Edit alarm 
         */
        public static final int menu_edit_alarm=0x7f0c0008;
        /**  Menu item on most screens to get to the help information 
         */
        public static final int menu_item_help=0x7f0c0052;
        /**  Menu item on clock screen to enter night mode. 
         */
        public static final int menu_item_night_mode=0x7f0c0053;
        /**  Menu item on most screens to get to more settings 
         */
        public static final int menu_item_settings=0x7f0c0051;
        /**  Menu item on Cities screen to sort by GMT offset 
         */
        public static final int menu_item_sort_by_gmt_offset=0x7f0c0054;
        /**  Menu item on Cities screen to sort by alphabetical order 
         */
        public static final int menu_item_sort_by_name=0x7f0c0055;
        /**  Describes the purpose of the tab button which which switches the activity to the Stopwatch page 
         */
        public static final int menu_stopwatch=0x7f0c004d;
        /**  Describes the purpose of the tab button which which switches the activity to the Timer page 
         */
        public static final int menu_timer=0x7f0c004b;
        /**  Alarm confirmation toast: singular minute  
         */
        public static final int minute=0x7f0c0023;
        /**  Alarm confirmation toast: plural minutes  
         */
        public static final int minutes=0x7f0c0024;
        /**  Abbreviation for temporal minutes [CHAR LIMIT=1] 
         */
        public static final int minutes_label=0x7f0c005e;
        public static final int minutes_label_description=0x7f0c0061;
        /**  Text to appear in when trying to view a missed alarm that has been deleted 
         */
        public static final int missed_alarm_has_been_deleted=0x7f0c001e;
        public static final int music_button_description=0x7f0c003d;
        /**  Repeat options that appear under an alarm on main Alarm Clock
         screen to identify repetition schedule: special case for when
         the alarm is set to never repeat 
         */
        public static final int never=0x7f0c0026;
        /**  Description of field showing the next alarm time in the clock page, for accessibility. 
         */
        public static final int next_alarm_description=0x7f0c0097;
        /**  Notification text when at least one timer, of those in use, is counting down. 
         */
        public static final int next_timer_notif=0x7f0c008d;
        /**  Describes intensity of display diminuation during dream mode 
         */
        public static final int night_mode_summary=0x7f0c0090;
        /**  Title for check box to pick intensity of display diminuation during dream mode 
         */
        public static final int night_mode_title=0x7f0c008f;
        public static final int nightmode_button_description=0x7f0c003e;
        /**  String for no alarms 
         */
        public static final int no_alarms=0x7f0c00a4;
        /**  String for no enabled alarms in timeline view [CHAR LIMIT=30] 
         */
        public static final int no_upcoming_alarms=0x7f0c00a5;
        public static final int pos_config_logclose=0x7f0c00b4;
        public static final int pos_config_logopen=0x7f0c00b3;
        public static final int pos_config_name=0x7f0c00b0;
        public static final int pos_config_startlog=0x7f0c00b1;
        public static final int pos_config_stoplog=0x7f0c00b2;
        /**  Revert button when editing an alarm. 
         */
        public static final int revert=0x7f0c0031;
        /**  Label on expanded alarm edit view. 
         */
        public static final int ringtone=0x7f0c0015;
        public static final int ringtone_description=0x7f0c0042;
        /**  screensaver settings strings 
 Label for the screen saver activity displayed on-screen when that activity must be represented to the user. 
         */
        public static final int screensaver_settings=0x7f0c008e;
        /**  Abbreviation for temporal seconds [CHAR LIMIT=1] 
         */
        public static final int seconds_label=0x7f0c005f;
        public static final int seconds_label_description=0x7f0c0062;
        /**  Describes the purpose of the button to show the remaining choices whenever there were too many 
         */
        public static final int see_all=0x7f0c0081;
        /**  Label for selected cities in Cities list view 
         */
        public static final int selected_cities_label=0x7f0c0056;
        /**  Preference category on Alarm Settings screen: Set alarm 
 Also label for the old Alarms dialog activity displayed on-screen when that activity must be represented to the user. 
         */
        public static final int set_alarm=0x7f0c0011;
        /**  Settings activity name 
 Label for the Settings activity displayed on-screen when that activity must be represented to the user. 
         */
        public static final int settings=0x7f0c002b;
        /**  Menu item on Alarm Clock screen: Show clock 
         */
        public static final int show_clock=0x7f0c000d;
        /**  Summary for the alarm preference when silent is chosen. 
         */
        public static final int silent_alarm_summary=0x7f0c0034;
        /**  slash between date and next alarm in the clock 
         */
        public static final int slash=0x7f0c0095;
        /**  Setting title for changing the snooze duration. 
         */
        public static final int snooze_duration_title=0x7f0c002c;
        /**  Describes the running service for the stopwatch 
         */
        public static final int stopwatch_service_desc=0x7f0c0083;
        /**  Describes the purpose of the button to record current the stopwatch value into the4 collection of lap times. 
         */
        public static final int sw_lap_button=0x7f0c005a;
        /**  Label to enumerate the number of laps in the notification the user has counted 
         */
        public static final int sw_notification_lap_number=0x7f0c0066;
        /**  Describes the purpose of the button to return the stopwatch to zero and remove the lap times. 
         */
        public static final int sw_reset_button=0x7f0c005b;
        /**  Stop Watch strings 
 Describes the purpose of the button to resume running a stopwatch 
         */
        public static final int sw_resume_button=0x7f0c0057;
        /**  Describes the purpose of the button to share the stopwatch value. 
         */
        public static final int sw_share_button=0x7f0c005c;
        /**  Header within the message created to share a list of lap times (a new line is appended to this) 
         */
        public static final int sw_share_laps=0x7f0c0065;
        /**   Stopwatch share strings 
 Sentence within the message created to share the total time recorded within the stopwatch 
         */
        public static final int sw_share_main=0x7f0c0064;
        /**  Describes the purpose of the button to begin running a stopwatch 
         */
        public static final int sw_start_button=0x7f0c0058;
        /**  Describes the purpose of the button to pause a stopwatch. 
         */
        public static final int sw_stop_button=0x7f0c0059;
        /**  Desription for the stopped stop watch 
         */
        public static final int swn_stopped=0x7f0c0084;
        /**  Setting labels on Set alarm screen: Set time  
         */
        public static final int time=0x7f0c0016;
        /**  add 00 as minutes to the time when pressing this button 
         */
        public static final int time_picker_00_label=0x7f0c007e;
        /**  add 30 as minutes to the time when pressing this button 
         */
        public static final int time_picker_30_label=0x7f0c007f;
        /**   place holder for am/pm label when it is not set 
         */
        public static final int time_picker_ampm_label=0x7f0c007d;
        /**  Textual content of the button to discard the current dialog values and close the dialog 
         */
        public static final int time_picker_cancel=0x7f0c007a;
        /**  Textual content of the button to update an alarm with the current dialog values 
         */
        public static final int time_picker_set=0x7f0c007b;
        public static final int time_picker_time_seperator=0x7f0c007c;
        /**  timer strings 
 Describes the purpose of the button to add a new timer 
         */
        public static final int timer_add_timer=0x7f0c0067;
        /**  Describes the purpose of the button to discard the current dialog values. Will also close the dialog if other time's exist 
         */
        public static final int timer_cancel=0x7f0c006f;
        /**  Describes the purpose of the button to delete a timer. 
         */
        public static final int timer_delete=0x7f0c0069;
        /**  Timer deletion confirmation 
         */
        public static final int timer_delete_confirmation=0x7f0c009b;
        /**  Describes the purpose of the button to stop and delete the timer. 
         */
        public static final int timer_done=0x7f0c006d;
        /**  Label associated with a notification for a Timer 
         */
        public static final int timer_notification_label=0x7f0c0071;
        /**  Like "timer_plus_one", but with 'minute' abbreviated for the notification. 
         */
        public static final int timer_plus_1_min=0x7f0c006b;
        /**  Describes the purpose of the button increase the remaining time on a timer by one minute. 
         */
        public static final int timer_plus_one=0x7f0c006a;
        /**  Describes the purpose of the button to return the timer to it's original starting value. 
         */
        public static final int timer_reset=0x7f0c006e;
        /**  A description for the DeskClock timer sound playback service.
         [CHAR LIMIT=NONE] 
         */
        public static final int timer_ring_service_desc=0x7f0c0047;
        /**  Describes the purpose of the button to begin or continue running a timer 
         */
        public static final int timer_start=0x7f0c0068;
        /**  Describes the purpose of the button to stop the timer. 
         */
        public static final int timer_stop=0x7f0c006c;
        /**  Notification title when timer is stopped. 
         */
        public static final int timer_stopped=0x7f0c0089;
        /**  Notification content shown when a timer has completed and has no more time remaining 
         */
        public static final int timer_times_up=0x7f0c0070;
        /**  Notification title when at least one timer, of those in use, is counting down. 
         */
        public static final int timers_in_use=0x7f0c008c;
        /**  Notification title when multiple timers are stopped. 
         */
        public static final int timers_stopped=0x7f0c008a;
        /**  Dialog title of the volume and power setting. 
         */
        public static final int volume_button_dialog_title=0x7f0c0039;
        /**  Title of the setting to change hardware button behavior. This string
         should be changed for each piece of hardware. [CHAR LIMIT=20] 
         */
        public static final int volume_button_setting_title=0x7f0c0038;
        /**  Font size for AM/PM should match widget_label_font_size 
         */
        public static final int wc_widget_12_hours_format=0x7f0c00a0;
        /**  What to show the user if the weather widget exists but fails to
         respond. This is a sign of an error; if the weather widget is not
         present on the device, we show nothing at all. 
         */
        public static final int weather_fetch_failure=0x7f0c0044;
        /**  Font size for AM/PM should match label_font_size 
         */
        public static final int world_clock_12_hours_format=0x7f0c00a2;
        /**  slash between date and next alarm in the clock 
         */
        public static final int world_day_of_week_label=0x7f0c0096;
        public static final int zero=0x7f0c0063;
    }
    public static final class style {
        public static final int DeskClock=0x7f0f0001;
        public static final int TextAppearance=0x7f0f001c;
        /**  Status Bar Styles 
         */
        public static final int TextAppearance_StatusBar=0x7f0f001d;
        /**  Notification content styles 
         */
        public static final int TextAppearance_StatusBar_EventContent=0x7f0f001e;
        public static final int TextAppearance_StatusBar_EventContent_Line2=0x7f0f0020;
        public static final int TextAppearance_StatusBar_EventContent_Time=0x7f0f0021;
        public static final int TextAppearance_StatusBar_EventContent_Title=0x7f0f001f;
        public static final int TimePickerDialog=0x7f0f001b;
        public static final int ToastBarStyle=0x7f0f0022;
        public static final int alarm_label=0x7f0f000e;
        public static final int alarm_label_bold=0x7f0f0010;
        public static final int alarm_label_not_caps=0x7f0f000f;
        public static final int big_thin=0x7f0f000c;
        public static final int body=0x7f0f0011;
        public static final int body_bold=0x7f0f0013;
        public static final int body_not_caps=0x7f0f0012;
        public static final int bold_button=0x7f0f0017;
        public static final int button=0x7f0f0014;
        public static final int city_name=0x7f0f0019;
        public static final int city_time=0x7f0f001a;
        public static final int clock=0x7f0f0000;
        public static final int dialog_button=0x7f0f0016;
        public static final int dialpad=0x7f0f0018;
        public static final int header=0x7f0f000a;
        public static final int header_not_caps=0x7f0f000b;
        public static final int label=0x7f0f0007;
        public static final int label_not_caps=0x7f0f0008;
        public static final int medium_light=0x7f0f0005;
        public static final int small_light=0x7f0f0002;
        public static final int timer_label=0x7f0f0015;
        public static final int timer_setup_digit=0x7f0f0003;
        public static final int timer_setup_label=0x7f0f0004;
        public static final int widget_big_thin=0x7f0f000d;
        public static final int widget_label=0x7f0f0009;
        public static final int widget_medium_thin=0x7f0f0006;
    }
    public static final class xml {
        public static final int dream_info=0x7f050000;
        public static final int dream_settings=0x7f050001;
        public static final int settings=0x7f050002;
    }
    public static final class styleable {
        /** Attributes that can be used with a AnalogClock.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #AnalogClock_jewelColor com.android.deskclock3:jewelColor}</code></td><td></td></tr>
           <tr><td><code>{@link #AnalogClock_jewelOffset com.android.deskclock3:jewelOffset}</code></td><td></td></tr>
           <tr><td><code>{@link #AnalogClock_jewelRadius com.android.deskclock3:jewelRadius}</code></td><td></td></tr>
           </table>
           @see #AnalogClock_jewelColor
           @see #AnalogClock_jewelOffset
           @see #AnalogClock_jewelRadius
         */
        public static final int[] AnalogClock = {
            0x7f01000d, 0x7f01000e, 0x7f01000f
        };
        /**
          <p>This symbol is the offset where the {@link com.android.deskclock3.R.attr#jewelColor}
          attribute's value can be found in the {@link #AnalogClock} array.


          <p>Must be a color value, in the form of "<code>#<i>rgb</i></code>", "<code>#<i>argb</i></code>",
"<code>#<i>rrggbb</i></code>", or "<code>#<i>aarrggbb</i></code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.deskclock3:jewelColor
        */
        public static final int AnalogClock_jewelColor = 2;
        /**
          <p>This symbol is the offset where the {@link com.android.deskclock3.R.attr#jewelOffset}
          attribute's value can be found in the {@link #AnalogClock} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.deskclock3:jewelOffset
        */
        public static final int AnalogClock_jewelOffset = 1;
        /**
          <p>This symbol is the offset where the {@link com.android.deskclock3.R.attr#jewelRadius}
          attribute's value can be found in the {@link #AnalogClock} array.


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          @attr name com.android.deskclock3:jewelRadius
        */
        public static final int AnalogClock_jewelRadius = 0;
        /** Attributes that can be used with a GlowPadView.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #GlowPadView_alwaysTrackFinger com.android.deskclock3:alwaysTrackFinger}</code></td><td> Used when the handle shouldn't wait to be hit before following the finger </td></tr>
           <tr><td><code>{@link #GlowPadView_android_gravity android:gravity}</code></td><td></td></tr>
           <tr><td><code>{@link #GlowPadView_directionDescriptions com.android.deskclock3:directionDescriptions}</code></td><td> Reference to an array resource that be used to announce the directions with targets around the circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_feedbackCount com.android.deskclock3:feedbackCount}</code></td><td> Number of waves/chevrons to show in animation.</td></tr>
           <tr><td><code>{@link #GlowPadView_glowRadius com.android.deskclock3:glowRadius}</code></td><td> Size of target radius.</td></tr>
           <tr><td><code>{@link #GlowPadView_handleDrawable com.android.deskclock3:handleDrawable}</code></td><td> Sets a drawable as the center.</td></tr>
           <tr><td><code>{@link #GlowPadView_innerRadius com.android.deskclock3:innerRadius}</code></td><td> Inner radius of glow area.</td></tr>
           <tr><td><code>{@link #GlowPadView_outerRadius com.android.deskclock3:outerRadius}</code></td><td> Outer radius of glow area.</td></tr>
           <tr><td><code>{@link #GlowPadView_outerRingDrawable com.android.deskclock3:outerRingDrawable}</code></td><td> Drawable to use for wave ripple animation.</td></tr>
           <tr><td><code>{@link #GlowPadView_pointDrawable com.android.deskclock3:pointDrawable}</code></td><td> Drawble used for drawing points </td></tr>
           <tr><td><code>{@link #GlowPadView_snapMargin com.android.deskclock3:snapMargin}</code></td><td> How close we need to be before snapping to a target.</td></tr>
           <tr><td><code>{@link #GlowPadView_targetDescriptions com.android.deskclock3:targetDescriptions}</code></td><td> Reference to an array resource that be used as description for the targets around the circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_targetDrawables com.android.deskclock3:targetDrawables}</code></td><td> Reference to an array resource that be shown as targets around a circle.</td></tr>
           <tr><td><code>{@link #GlowPadView_vibrationDuration com.android.deskclock3:vibrationDuration}</code></td><td> Tactile feedback duration for actions.</td></tr>
           </table>
           @see #GlowPadView_alwaysTrackFinger
           @see #GlowPadView_android_gravity
           @see #GlowPadView_directionDescriptions
           @see #GlowPadView_feedbackCount
           @see #GlowPadView_glowRadius
           @see #GlowPadView_handleDrawable
           @see #GlowPadView_innerRadius
           @see #GlowPadView_outerRadius
           @see #GlowPadView_outerRingDrawable
           @see #GlowPadView_pointDrawable
           @see #GlowPadView_snapMargin
           @see #GlowPadView_targetDescriptions
           @see #GlowPadView_targetDrawables
           @see #GlowPadView_vibrationDuration
         */
        public static final int[] GlowPadView = {
            0x010100af, 0x7f010000, 0x7f010001, 0x7f010002,
            0x7f010003, 0x7f010004, 0x7f010005, 0x7f010006,
            0x7f010007, 0x7f010008, 0x7f010009, 0x7f01000a,
            0x7f01000b, 0x7f01000c
        };
        /**
          <p>
          @attr description
           Used when the handle shouldn't wait to be hit before following the finger 


          <p>Must be a boolean value, either "<code>true</code>" or "<code>false</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:alwaysTrackFinger
        */
        public static final int GlowPadView_alwaysTrackFinger = 13;
        /**
          <p>This symbol is the offset where the {@link android.R.attr#gravity}
          attribute's value can be found in the {@link #GlowPadView} array.
          @attr name android:gravity
        */
        public static final int GlowPadView_android_gravity = 0;
        /**
          <p>
          @attr description
           Reference to an array resource that be used to announce the directions with targets around the circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.deskclock3:directionDescriptions
        */
        public static final int GlowPadView_directionDescriptions = 3;
        /**
          <p>
          @attr description
           Number of waves/chevrons to show in animation. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:feedbackCount
        */
        public static final int GlowPadView_feedbackCount = 12;
        /**
          <p>
          @attr description
           Size of target radius. Points within this distance of target center is a "hit". 

        <attr name="hitRadius" format="dimension"/>
        
 Radius of glow under finger. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:glowRadius
        */
        public static final int GlowPadView_glowRadius = 9;
        /**
          <p>
          @attr description
           Sets a drawable as the center. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.deskclock3:handleDrawable
        */
        public static final int GlowPadView_handleDrawable = 4;
        /**
          <p>
          @attr description
           Inner radius of glow area. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:innerRadius
        */
        public static final int GlowPadView_innerRadius = 7;
        /**
          <p>
          @attr description
           Outer radius of glow area. Target icons will be drawn on this circle. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:outerRadius
        */
        public static final int GlowPadView_outerRadius = 8;
        /**
          <p>
          @attr description
           Drawable to use for wave ripple animation. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.deskclock3:outerRingDrawable
        */
        public static final int GlowPadView_outerRingDrawable = 5;
        /**
          <p>
          @attr description
           Drawble used for drawing points 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.deskclock3:pointDrawable
        */
        public static final int GlowPadView_pointDrawable = 6;
        /**
          <p>
          @attr description
           How close we need to be before snapping to a target. 


          <p>Must be a dimension value, which is a floating point number appended with a unit such as "<code>14.5sp</code>".
Available units are: px (pixels), dp (density-independent pixels), sp (scaled pixels based on preferred font size),
in (inches), mm (millimeters).
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:snapMargin
        */
        public static final int GlowPadView_snapMargin = 11;
        /**
          <p>
          @attr description
           Reference to an array resource that be used as description for the targets around the circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.deskclock3:targetDescriptions
        */
        public static final int GlowPadView_targetDescriptions = 2;
        /**
          <p>
          @attr description
           Reference to an array resource that be shown as targets around a circle. 


          <p>Must be a reference to another resource, in the form "<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>"
or to a theme attribute in the form "<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>".
          <p>This is a private symbol.
          @attr name com.android.deskclock3:targetDrawables
        */
        public static final int GlowPadView_targetDrawables = 1;
        /**
          <p>
          @attr description
           Tactile feedback duration for actions. Set to '0' for no vibration. 


          <p>Must be an integer value, such as "<code>100</code>".
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:vibrationDuration
        */
        public static final int GlowPadView_vibrationDuration = 10;
        /** Attributes that can be used with a TextTime.
           <p>Includes the following attributes:</p>
           <table>
           <colgroup align="left" />
           <colgroup align="left" />
           <tr><th>Attribute</th><th>Description</th></tr>
           <tr><td><code>{@link #TextTime_format12Hour com.android.deskclock3:format12Hour}</code></td><td> Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode.</td></tr>
           <tr><td><code>{@link #TextTime_format24Hour com.android.deskclock3:format24Hour}</code></td><td> Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode.</td></tr>
           </table>
           @see #TextTime_format12Hour
           @see #TextTime_format24Hour
         */
        public static final int[] TextTime = {
            0x7f010010, 0x7f010011
        };
        /**
          <p>
          @attr description
           Specifies the formatting pattern used to show the time and/or date
             in 12-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is "h:mm a". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:format12Hour
        */
        public static final int TextTime_format12Hour = 0;
        /**
          <p>
          @attr description
           Specifies the formatting pattern used to show the time and/or date
             in 24-hour mode. Please refer to {@link android.text.format.DateFormat}
             for a complete description of accepted formatting patterns.
             The default pattern is "H:mm". 


          <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
<p>This may also be a reference to a resource (in the form
"<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>") or
theme attribute (in the form
"<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>")
containing a value of this type.
          <p>This is a private symbol.
          @attr name com.android.deskclock3:format24Hour
        */
        public static final int TextTime_format24Hour = 1;
    };
}
